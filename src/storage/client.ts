/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Nhost Storage API
 * Nhost Storage API - A service for managing and serving files with powerful access control capabilities
 * OpenAPI spec version: 1.0.0
 */
import Axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse,
  CreateAxiosDefaults
} from 'axios';

/**
 * Contains version information about the storage service.
 */
export interface VersionInformation {
  /** The version number of the storage service build. */
  buildVersion?: string;
}

/**
 * Basic information about a file in storage.
 */
export interface FileSummary {
  /** Unique identifier for the file. */
  id?: string;
  /** Name of the file including extension. */
  name?: string;
  /** ID of the bucket containing the file. */
  bucketId?: string;
  /** Whether the file has been successfully uploaded. */
  isUploaded?: boolean;
}

/**
 * Custom metadata associated with the file.
 */
export type FileMetadataMetadata = { [key: string]: unknown };

/**
 * Comprehensive metadata information about a file in storage.
 */
export interface FileMetadata {
  /** Unique identifier for the file. */
  id?: string;
  /** Name of the file including extension. */
  name?: string;
  /** Size of the file in bytes. */
  size?: number;
  /** ID of the bucket containing the file. */
  bucketId?: string;
  /** Entity tag for cache validation. */
  etag?: string;
  /** Timestamp when the file was created. */
  createdAt?: string;
  /** Timestamp when the file was last updated. */
  updatedAt?: string;
  /** Whether the file has been successfully uploaded. */
  isUploaded?: boolean;
  /** MIME type of the file. */
  mimeType?: string;
  /** ID of the user who uploaded the file. */
  uploadedByUserId?: string;
  /** Custom metadata associated with the file. */
  metadata?: FileMetadataMetadata;
}

/**
 * Custom metadata to associate with the file.
 */
export type UploadFileMetadataMetadata = { [key: string]: unknown };

/**
 * Metadata provided when uploading a new file.
 */
export interface UploadFileMetadata {
  /** Optional custom ID for the file. If not provided, a UUID will be generated. */
  id?: string;
  /** Name to assign to the file. If not provided, the original filename will be used. */
  name?: string;
  /** Custom metadata to associate with the file. */
  metadata?: UploadFileMetadataMetadata;
}

/**
 * Updated custom metadata to associate with the file.
 */
export type UpdateFileMetadataMetadata = { [key: string]: unknown };

/**
 * Metadata that can be updated for an existing file.
 */
export interface UpdateFileMetadata {
  /** New name to assign to the file. */
  name?: string;
  /** Updated custom metadata to associate with the file. */
  metadata?: UpdateFileMetadataMetadata;
}

/**
 * Contains a presigned URL for direct file operations.
 */
export interface PresignedURLResponse {
  /** The presigned URL for file operations. */
  url?: string;
  /** The time in seconds until the URL expires. */
  expiration?: number;
}

/**
 * Error details.
 */
export type ErrorError = {
  /** Human-readable error message. */
  message: string;
};

/**
 * Error information returned by the API.
 */
export interface Error {
  /** Error details. */
  error?: ErrorError;
}

export type GetOpenAPISpec200 = { [key: string]: unknown };

export type UploadFilesBody = {
  /** Target bucket identifier where files will be stored. */
  'bucket-id'?: string;
  /** Optional custom metadata for each uploaded file. Must match the order of the file[] array. */
  'metadata[]'?: UploadFileMetadata[];
  /** Array of files to upload. */
  'file[]'?: Blob[];
};

export type UploadFiles201 = {
  /** List of successfully processed files with their metadata. */
  processedFiles?: FileMetadata[];
};

export type GetFileMetadataHeadersParams = {
/**
 * Image quality (1-100). Only applies to JPEG, WebP and PNG files
 */
q?: number;
/**
 * Maximum height to resize image to while maintaining aspect ratio. Only applies to image files
 */
h?: number;
/**
 * Maximum width to resize image to while maintaining aspect ratio. Only applies to image files
 */
w?: number;
/**
 * Blur the image using this sigma value. Only applies to image files
 */
b?: number;
/**
 * Output format for image files. Use 'auto' for content negotiation based on Accept header
 */
f?: GetFileMetadataHeadersF;
};

export type GetFileMetadataHeadersF = typeof GetFileMetadataHeadersF[keyof typeof GetFileMetadataHeadersF];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFileMetadataHeadersF = {
  auto: 'auto',
  same: 'same',
  jpeg: 'jpeg',
  webp: 'webp',
  png: 'png',
  avif: 'avif',
} as const;

export type GetFileParams = {
/**
 * Image quality (1-100). Only applies to JPEG, WebP and PNG files
 */
q?: number;
/**
 * Maximum height to resize image to while maintaining aspect ratio. Only applies to image files
 */
h?: number;
/**
 * Maximum width to resize image to while maintaining aspect ratio. Only applies to image files
 */
w?: number;
/**
 * Blur the image using this sigma value. Only applies to image files
 */
b?: number;
/**
 * Output format for image files. Use 'auto' for content negotiation based on Accept header
 */
f?: GetFileF;
};

export type GetFileF = typeof GetFileF[keyof typeof GetFileF];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFileF = {
  auto: 'auto',
  same: 'same',
  jpeg: 'jpeg',
  webp: 'webp',
  png: 'png',
  avif: 'avif',
} as const;

export type ReplaceFileBody = {
  /** Optional metadata to update for the file */
  metadata?: UpdateFileMetadata;
  /** New file content to replace the existing file */
  file?: Blob;
};

export const createApiClient = (config?: CreateAxiosDefaults) => {
  const axios = Axios.create(config);
/**
 * Returns the OpenAPI schema definition for this API, allowing clients to understand the available endpoints and models.
 * @summary Get OpenAPI specification
 */
const getOpenAPISpec = <TData = AxiosResponse<GetOpenAPISpec200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/openapi.yaml`,options
    );
  }

/**
 * Retrieves build and version information about the storage service. Useful for monitoring and debugging.
 * @summary Get service version information
 */
const getVersion = <TData = AxiosResponse<VersionInformation>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/version`,options
    );
  }

/**
 * Upload one or more files to a specified bucket. Supports batch uploading with optional custom metadata for each file. If uploading multiple files, either provide metadata for all files or none.
 * @summary Upload files
 */
const uploadFiles = <TData = AxiosResponse<UploadFiles201>>(
    uploadFilesBody: UploadFilesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
if(uploadFilesBody['bucket-id'] !== undefined) {
 formData.append(`bucket-id`, uploadFilesBody['bucket-id'])
 }
if(uploadFilesBody['metadata[]'] !== undefined) {
 uploadFilesBody['metadata[]'].forEach(value => formData.append(`metadata[]`, JSON.stringify(value)));
 }
if(uploadFilesBody['file[]'] !== undefined) {
 uploadFilesBody['file[]'].forEach(value => formData.append(`file[]`, value));
 }

    return axios.post(
      `/files/`,
      formData,options
    );
  }

/**
 * Retrieve file metadata headers without downloading the file content. Supports conditional requests and provides caching information.
 * @summary Check file information
 */
const getFileMetadataHeaders = <TData = AxiosResponse<void>>(
    id: string,
    params?: GetFileMetadataHeadersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.head(
      `/files/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve and download the complete file content. Supports conditional requests, image transformations, and range requests for partial downloads.
 * @summary Download file
 */
const getFile = <TData = AxiosResponse<unknown>>(
    id: string,
    params?: GetFileParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/files/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Replace an existing file with new content while preserving the file ID. The operation follows these steps:
1. The isUploaded flag is set to false to mark the file as being updated
2. The file content is replaced in the storage backend
3. File metadata is updated (size, mime-type, isUploaded, etc.)

Each step is atomic, but if a step fails, previous steps will not be automatically rolled back.

 * @summary Replace file
 */
const replaceFile = <TData = AxiosResponse<FileMetadata>>(
    id: string,
    replaceFileBody: ReplaceFileBody, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
if(replaceFileBody.metadata !== undefined) {
 formData.append(`metadata`, JSON.stringify(replaceFileBody.metadata));
 }
if(replaceFileBody.file !== undefined) {
 formData.append(`file`, replaceFileBody.file)
 }

    return axios.put(
      `/files/${id}`,
      formData,options
    );
  }

/**
 * Permanently delete a file from storage. This removes both the file content and its associated metadata.
 * @summary Delete file
 */
const deleteFile = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/files/${id}`,options
    );
  }

return {getOpenAPISpec,getVersion,uploadFiles,getFileMetadataHeaders,getFile,replaceFile,deleteFile, axios}};
export type GetOpenAPISpecResult = AxiosResponse<GetOpenAPISpec200>
export type GetVersionResult = AxiosResponse<VersionInformation>
export type UploadFilesResult = AxiosResponse<UploadFiles201>
export type GetFileMetadataHeadersResult = AxiosResponse<void>
export type GetFileResult = AxiosResponse<unknown>
export type ReplaceFileResult = AxiosResponse<FileMetadata>
export type DeleteFileResult = AxiosResponse<void>
