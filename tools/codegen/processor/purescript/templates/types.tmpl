{{- define "renderObjectComment" -}}
{{- if .Schema.Schema.Description }}
-- | {{ .Schema.Schema.Description }}
{{- end }}
{{- if .Schema.Schema.Example }}
-- | Example: `{{ example .}}`
{{- end }}
{{- if .Schema.Schema.Pattern }}
-- | Pattern: {{ pattern . }}
{{- end }}
{{- if .Schema.Schema.Format }}
-- | Format: {{ format . }}
{{- end }}
{{- if .Schema.Schema.MinLength }}
-- | MinLength: {{ .Schema.Schema.MinLength }}
{{- end }}
{{- if .Schema.Schema.MaxLength }}
-- | MaxLength: {{ .Schema.Schema.MaxLength }}
{{- end }}
{{- end -}}

{{- define "renderParamComment" -}}
{{- if .Description -}}
{{ .Description }}
{{- end -}}
{{- if and .Schema .Schema.Schema .Schema.Schema.Description -}}
{{ .Schema.Schema.Description }}
{{- end -}}
{{- end -}}

{{- define "renderObject" -}}
-- | {{ .Schema.Schema.Description }}
-- |
{{- range .Properties }}
-- | * `{{ recordFieldName .Name }}`{{ if not .Required }} (Optional){{ end }}: `{{ .Type.Name }}` - {{ template "renderObjectComment" .Type }}
{{- end }}
type {{ .Name }} =
  { {{- range $i, $prop := .Properties }}{{ if ne $i 0 }}
  , {{ end }}{{ recordFieldName .Name }} :: {{ if not .Required }}Maybe ({{ end }}{{ .Type.Name }}{{ if not .Required }}){{ end }} -- {{ template "renderObjectComment" .Type }}
  {{- end }}
  }

-- JSON instances for {{ .Name }}
instance encodeJson{{ .Name }} :: EncodeJson {{ .Name }} where
  encodeJson record =
{{- range $i, $prop := .Properties }}
    {{ if eq $i 0 }}"{{ .Name }}" := record.{{ recordFieldName .Name }}{{ else }}
    ~> "{{ .Name }}" := record.{{ recordFieldName .Name }}{{ end }}
{{- end }}
    ~> jsonEmptyObject

instance decodeJson{{ .Name }} :: DecodeJson {{ .Name }} where
  decodeJson json = do
    obj <- decodeJson json
{{- range .Properties }}
    {{ recordFieldName .Name }} <- obj {{ if .Required }}.:{{ else }}.:?{{ end }} "{{ .Name }}"
{{- end }}
    pure { {{ range $i, $prop := .Properties }}{{ if ne $i 0 }}, {{ end }}{{ recordFieldName .Name }}{{ end }} }

{{- end }}

{{- define "methodSignature" -}}
{{- range .PathParameters }}{{ .Type.Name }} -> {{ end -}}
{{- range $code, $type := .Bodies }}{{ if not $.BodyRequired }}Maybe ({{ end }}{{ $type.Name }}{{ if not $.BodyRequired }}){{ end }} -> {{ end -}}
{{- if .HasQueryParameters }}Maybe {{ typeName .Name }}Params -> {{ end -}}
Aff (FetchResponse {{ .ReturnType }})
{{- end -}}

{{- define "methodImplementation" -}}
\{{ range .PathParameters }}{{ lowerFirst .Name }} {{ end -}}
{{- range $code, $type := .Bodies }}body {{ end -}}
{{- if .HasQueryParameters }}params {{ end -}}-> do
  -- Method implementation would go here
  -- This is a placeholder
  pure { body: unit, status: 200, headers: [] }
{{- end -}}

{{- define "safeFieldName" -}}
{{- $name := .Name -}}
{{- if or (eq $name "type") (eq $name "module") (eq $name "case") (eq $name "class") (eq $name "data") -}}
{{ $name }}_  {{/* append underscore */}}
{{- else -}}
{{ recordFieldName $name }}
{{- end -}}
{{- end -}}
